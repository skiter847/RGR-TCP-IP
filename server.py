import socket

# Задаем адрес сервера
HOST = 'localhost'
PORT = 5555

# -------------------------------------Настройки сокета-----------------------------------------------------------------

# создание сокета, первый параметр указывает какоя версия IP будет использована если AF_INET значит IPV4...
# если AF_INET6 значит IPV6, вторым параметром мы указывает какой протокол передачи данных мы будет использывать...
# если SOCK_STREAM значит протокол TCP, если  SOCK_DGRAM протокол UDP, все данные взяты и документации python https://docs.python.org/3/library/socket.html#socket-objects
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# занимаем в системе(биндим) адресс и порт для прослушки входящих пакетов(дейтаграмм)
server_socket.bind((HOST, PORT))

# С помощью метода listen мы запустим для данного сокета режим прослушивания
# Метод принимает один аргумент — максимальное количество подключений в очереди
server_socket.listen(1)

# вывод информации в консоль о том что сервер запущен
print('Сервер успешно запущен')

# ----------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------Прослушка запросов-------------------------------------------------------
while True:
    # в 2 переменные записываються данные от нового подключения - сокет и адрес отправителя
    connection, address = server_socket.accept()

    # выводим информацию в консоль об новом подключении
    print(f"Новое подключение, адрес - {address[0]}/{address[1]}")

    # Т.к. мы не можем точно знать, что и в каких объемах клиент нам пошлет, то мы будем получать данные от него небольшими порциями.
    # Чтобы получить данные нужно воспользоваться методом recv, который в качестве аргумента принимает количество байт для чтения.
    # Мы будем читать порциями по 1024 байт (или 1 кб)
    data = connection.recv(1024)

    # вывод в консоль того сообщения что отправил на клиент
    print(data.decode('utf-8'))

    # в ответ на входящие данные сервер будет отправлять клиенту ту же самую строку только в верхнем регистре
    connection.send(bytes(data.decode('utf-8').upper(), encoding='utf-8'))

    connection.close()

# ----------------------------------------------------------------------------------------------------------------------
